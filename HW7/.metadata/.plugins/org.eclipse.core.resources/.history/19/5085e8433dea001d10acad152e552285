public class HW07_4109037012_1 extends LLK{

	public static void main(String[] args)
	{
		HW07_4109037012_1 t1 = new HW07_4109037012_1();
		int[][] array = {{1,2},{1,3},{1,4}};
//		int[][] array = {{0,0},{1,0},{1,1},{0,1}}; 
		System.out.println(t1.checkLLK(array));	
	}

public boolean checkPCL(int[][] array){
    int i,j;
    int len = array.length;
    int lnLen = (int)Math.ceil(Math.log10((double)len) / 0.3010);
    HashMap m = new HashMap(1 << lnLen);

    int deltaX, deltaY,gcd;
    for(i=0; i<len; i++){
        for(j=i+1; j<len; j++){
            deltaX = array[i][0] - array[j][0];
            deltaY = array[i][1] - array[j][1];

            //If there is duplicate test data return true
            //if(deltaX == 0 && deltaY == 0) return true;

            gcd = gcd(deltaY, deltaX);

            //If Both deltaX and deltaY are positive or negative
            //Than deltaX/gcd and deltaY are positive

            //If one of deltaX and deltaY is positive and the other is negative
            //Than one of deltaX/gcd and deltaY/gcd is positive and the other is negative
            //However, we don't know which one is positive or which one is negative
            //Thus, we will keep deltaX is positive and deltaY is negative
            //By changing their signed.

            deltaX = (deltaX / gcd);
            deltaY = (deltaY / gcd);
            if(deltaX < 0){
                deltaX = ~deltaX + 1;
                deltaY = ~deltaY + 1;
            }

            //containOrPut()
            //If the values has existed, return true
            //Else put into hashmap and return false
            if(m.containOrPut(deltaX, deltaY)){
                return true;
            }
        }
        m.reset();
    }

    return false;
}