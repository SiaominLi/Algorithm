public class HW06_4109037012_1 extends MedianOfArrays{

	public static void main(String[] args) {
		HW06_4109037012_1 hw6 = new HW06_4109037012_1();
		int[][] arr = {{1, 3, 10}, {-1, 5, 7}, {-2, 5, 12}} ;
		double ans = hw6.find_median(arr);
		System.out.print( "ans = "+ ans );
	}

	@Override
	public double find_median(int[][] arrays){
	    int m = arrays.length;
	    System.out.println("m="+m);
	    int total = 0;

	    // calculate the total number of elements in the 2-D array
	    for (int i = 0; i < m; i++) {
	        total += arrays[i].length;
	    }

	    if (total % 2 == 0) {
	        // if total number of elements is even
	        int midIndex1 = total / 2 - 1;
	        int midIndex2 = total / 2;

	        int count = 0;
	        int num1 = 0;
	        int num2 = 0;

	        // traverse the 2-D array and find the two middle elements
	        for (int i = 0; i < m; i++) {
	            int n = arrays[i].length;
	            for (int j = 0; j < n; j++) {
	                if (count == midIndex1) {
	                    num1 = arrays[i][j];
	                }
	                if (count == midIndex2) {
	                    num2 = arrays[i][j];
	                    break;
	                }
	                count++;
	            }
	        }
	        return (double) (num1 + num2) / 2;

	    } else {
	        // if total number of elements is odd
	        int midIndex = total / 2;

	        int count = 0;
	        int median = 0;

	        // traverse the 2-D array and find the middle element
	        for (int i = 0; i < m; i++) {
	            int n = arrays[i].length;
	            for (int j = 0; j < n; j++) {
	                if (count == midIndex) {
	                    median = arrays[i][j];
	                    break;
	                }
	                count++;
	            }
	        }
	        
	        return (double) median;
	    }
	}


}
